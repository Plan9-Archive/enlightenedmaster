!============================================================================
! The room decorations

Decor	instructions "instructions" master_chamber
	with
	name 'card' 'instruction' 'instructions',
	description "PLAY to start game. Control with targeted commands, such as SHOOT LEFT RAMP, SHOOT RIGHT RAMP, SHOOT BUMPERS. You can also try FLIP to play a full ball automatically.";

Target	lramp "left ramp" master_chamber
	with
	name 'left' 'ramp',
	triggers [;
		if((choicelock.lockready == 0) && (rramp.hitcount > 0)){
			choicelock.lockready = 1;
			"~Good job, the Infinity ramp has activated Axiom of Choice lock. That's a hard shot though.~";
		}
	];

Target	rramp "right ramp" master_chamber
	with
	name 'right' 'ramp',
	triggers [;
		if((choicelock.lockready == 0) && (lramp.hitcount > 0)){
			choicelock.lockready = 1;
			"~Nicely played, the Infinity ramp has activated Axiom of Choice lock. That one's tricky so be careful.~";
		}
	];

Target	magnet "forcing magnet" master_chamber
	with
	name 'forcing' 'magnet',
	value 50,
	risk 65,
	difficulty 125,
	level 0,
	triggers [;
		if(self.level > 0)
			return true;
		if(choicelock.multicount > 0 && bumpers.hitcount > 49) {
			em.points = em.points + 1000;
			self.level++;
			"~Wow! You got Induction on N, Axiom of Choice Multiball, AND you've hit the Forcing Magnet. That's a thousand point bonus for you.~";
		}
	];

Target	bumpers "bumpers" master_chamber
	with
	name 'bumper' 'bumpers' 'successor',
	value 2,
	risk 40,
	difficulty 75,
	bounces 0,
	goal 30,
	newgame [;
		self.value = 2;
		self.goal = 30;
	],
	hit [;
		self.bounces = random(10);
		self.hitcount = self.hitcount + self.bounces;
		em.points = em.points + (self.bounces * self.value);
		print "The ball gets ", self.bounces, " hits in the successor bumpers for ", self.bounces * self.value, " points.^";
		if(self.hitcount < self.goal)
			print self.goal - self.hitcount, " more hits to reach Induction on N.^";
		switch(self.bounces){
		1: "^~Counting from 0 to 1. Maybe the first step is the biggest of all.~";
		2: "^~OK, I admit it: I think 'successor' is a very suggestive sounding term.~";
		3: "^~Rhythm is created by the count, each +1 is a new beat.~";
		4: "^~Four bounces is about where it starts to tickle a bit.~";
		5: "^~Learn to enjoy that which is repetitive and typical.~";
		6: "^~If you can't climb a mountain to play an Enlightened pinball machine, just watch the surface of a lake a little before sunset.~";
		7: "^~That's my favorite number of bumper hits. Something about 7 just does it for me.~";
		8: "^~With 8, I see the vertexes of a cube. It's ok if its just a stop sign for you.~";
		9: "^~My friend Glenda says the space of names is richer than numbers, but I think it's equivalent.~";
		10: "^~That's an optimum result when it comes to bumpin' the successors.~";
		};
	],		
	triggers [;
		if(self.value == 2 && self.hitcount > 15){
			self.value = 4;
			"^~Since you like those bumpers so much, I'm doubling their value for you.~";
		}
		if(self.value == 4 && self.hitcount >= self.goal){
			self.value = 9;
			give staircase shootable;
			"^Successor function reaches Induction on N. New target available: Diagonalization Staircase.";
		}
	];

Target	choicelock "choice lock" master_chamber
	with
	name 'axiom' 'choice' 'lock' 'aoc',
	value 75,
	risk 75,
	difficulty 150,
	lockready 0,
	hasball 0,
	multicount 0,
	newgame [;
		self.lockready = 0;
		self.hasball = 0;
	],
	triggers [;
		if(self.lockready == 0)
			"You need to activate both sides of the Infinity ramp to prime the Axiom lock.";
		if(self.hasball == 1) {
			self.hasball = 0;
			self.multicount++;
			em.points = em.points + 500;
			give self ~shootable;
			"MULTIBALL! 500 point bonus. The Choice lock rotates under the table and vanishes. ~Excellent! Do you see these Golden Apples I'm juggling? Want to bet if I can take one apart and make two whole apples from it?";
		}
		self.hasball++;
		"The ball hits the Axiom of Choice lock dead-on and the mechanism grabs it with a satisfying thunk. ~We need the Axiom of Choice to prove a lot of things that we want to be true. It lets you talk about things by describing them, even if you don't know how to build them.~^";
	];

Target	staircase "diagonalization staircase" master_chamber
	with
	name 'staircase' 'stairs' 'diagonal' 'diagonalization',
	triggers [;
		switch(self.hitcount){
		1: "~Climbing the Diagonal Staircase is one of the first steps past the smallest infinity.~";
		2: "~In any one-to-one mapping between the counting numbers and the reals, you can construct an unlisted real by making each digit N differ from the Nth digit of the Nth real.~";
		3: "~Diagonalization is a special case of Cantor's proof showing that it is always impossible to construct a one-to-one mapping between the individual elements of a set and all possible multiple element subsets.~";
		}
	],
	has ~shootable;

!============================================================================
! The immobile prop objects

Prop	em "Enlightened Master" master_chamber
	with
	article "the",
	name 'enlightened' 'master' 'pinball' 'machine' 'game' 'table' 'pin',
	points 0,
	hiscore 0,
	ingame 0,
	balls 0,
	gamenumber 0,
	gameturns 0,
	description [;
		print_ret "The Enlightened Master is a pinball machine with a purple cabinet and gold metal. The standard flipper buttons are bright pink. A card in the corner of the machine is labelled 'INSTRUCTIONS' and is filled with small print. The backglass is a detailed artist's impression of the mountain peak at sunset, casting an impossibly long shadow across the clouds toward the horizon. The playfield has an open central section with an illustration of a woman juggling golden apples at the center. Two ramps rise from the playfield and cross paths in a figure 8. A set of bumpers labeled '+1' are in the upper right. In the upper left, a curved metallic shape hovers over the words 'Forcing Magnet'. Along the far left edge is a narrow gap next to the words 'AoC Lock'. Other toys and mechanisms are hidden while inactive. Above the playfield is a silvery dot-matrix display showing the current high score: ", self.hiscore;
	],
	before [;
		play: 
			if(self.ingame == 1)
				"You are already in the middle of a game!";
			self.ingame = 1;
			self.balls = 3;
			self.points = 0;
			skill.nudgecount = 0;
			objectloop(x has gametarget) x.hitcount = 0;
			objectloop(x has gametarget) x.newgame();
			self.gamenumber++;
			startdaemon(self);
			switch(self.gamenumber) {
			1: "You hit the start button and a melodious female voice greets you. ~Thank you for coming to see me, and welcome, learner! Are you ready to continue following the Path? Just SHOOT whatever target you like. The bumpers are a good place to start.~";
			2: "~I'm glad you're trying again. Don't get discouraged, your skill is increasing with every shot. What's hard now will be easy later. Of course, I'll have some new challenges for you then!~";
			3: "~We're starting to get to know each other well now, aren't we? I'd introduce myself, but I really have too many different names to try to share them all.~";
			default: "~Sure, I'm ready to go again!~";
			};
	],
	daemon [;
		self.gameturns++;
		emchat();
	];

object	skill "player skills"
	with
	catch 10,
	shoot 20,
	tilt 10,
	nudge 4,
	launch 25,
	multi 20,
	grit 15,
	luck 0,
	nudgeflag 0,
	nudgecount 0;



